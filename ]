{{template "layout" .}}

{{define "title"}}My developement workflow{{end}}

{{define "main"}}

  <div class="header">
    <h1 style="color: lightblue;">Tools That Support My Development Workflow</h1>
  </div>

  <div class="author-info">
    <img class="author-img" src="static/images/o.jpeg" alt="Osagie Godstand">
    <div class="text-sm">
      By Osagie Godstand
      on Feb 28, 2025
    </div>
  </div>

  <div class="content">
  <p>
  My software development workflow consists of using the terminal on the left side of my screen
  and a browser on the right side to search for and learn new things on the internet, as well as
  to check for changes I made during my coding session when manually testing my APIs.
  </p>

  <p>
  There are a lot of tools that enhance my development experience and workflow, such as Neovim, tmux,
  automation scripts, hot reloading for my Go frontends, and Spotlight Search for quickly finding and
  opening other development-related applications on my PC, like Postman and Docker Desktop.
  In this post, the focus will be on Neovim and tmux. I spend most of my development time in the
  terminal, thanks to Neovim and tmux. I will provide detailed explanantions of how
  these particular tools support my productivity and my reasons for choosing to use them.
  </p>

  <h2>What are Neovim and Tmux?</h2>

  <p>
  Neovim is a Vim-based editor that can be configured for coding using the Lua programming language.
  It comes with a wide range of plugins including LSPs for various programming languages, along
  with many other features you would expect from IDEs like Goland or code editors like VSCode.
  </p>

  <p>
  Tmux is a terminal multiplexer that allows you to create split panes and windows, meaning you
  do not need to open multiple terminals. Instead, you can perform multiple tasks within a single
  terminal window thanks to its features.
  </p>


  <h2>What my config consists of</h2>

  <p>
  My workflow using Neovim and tmux is simple; it does not involve too many features and plugins.
  The Neovim plugin manager I currently use is lazy.nvim, and some of the key plugins and features
  that make my overall experience great in Neovim are lspconfig, the telescope fuzzy finder,
  undotree toggle, hover document, goto definition, auto format, and nvim-cmp autocomplete. However,
  I do not use AI-based autocompletion like Copilot. I also do not use the traditional `hjkl` keys
  for navigating text. I prefer using the arrows because they feel more natural, though I might
  change that opinion in the future. The only improvement I could add to my configuration
  would be a debugger.
  </p>

  <p>
  In Tmux, I only use the windows feature. I first learned to use split panes, but I never really
  liked them, so I decided to try out the windows feature, which allows me to open as many windows
  as possible in a single session and that made my experience so much better. In a session every task
  including Neovim runs in their own dedicated window, which means I barely leave Neovim during
  my coding sessions.
  </p>


  <h2>Why I use Neovim and Tmux</h2>

  <p>
  </p>

  <p>
  </p>

  <p>
  </p>


  <h2>To Conclude</h2>

  <p>
  What makes Neovim and tmux a great addition to my workflow is not just about the
  cool features and plugins but also the ability to configure them exactly how I want
  and create shortcuts that make my entire experience even better.
  </p>

  <div class="links">
    <a href="posts">Back to Posts</a>
  </div>
</div>

{{end}}

